{
  "name": "react-jsx",
  "version": "0.13.0",
  "description": "Compile JSX templates to client and server-side renderable templates",
  "main": "index.js",
  "scripts": {
    "100%": "istanbul check-coverage --statements 100 --functions 100 --lines 100 --branches 100",
    "test": "mocha test.js",
    "watch": "mocha --watch test.js",
    "coverage": "istanbul cover ./node_modules/.bin/_mocha -- test.js",
    "test-travis": "istanbul cover node_modules/.bin/_mocha --report lcovonly -- test.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/bigpipe/react-jsx"
  },
  "keywords": [
    "react",
    "jsx",
    "compile",
    "all",
    "the",
    "things"
  ],
  "author": {
    "name": "Arnout Kazemier"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/bigpipe/react-jsx/issues"
  },
  "homepage": "https://github.com/bigpipe/react-jsx",
  "dependencies": {
    "react": "0.13.x",
    "react-tools": "0.13.x"
  },
  "devDependencies": {
    "assume": "1.1.x",
    "istanbul": "0.3.x",
    "mocha": "2.2.x",
    "pre-commit": "1.0.x"
  },
  "readme": "# react-jsx\n\n[![From bigpipe.io][from]](http://bigpipe.io)[![Version npm][version]](http://browsenpm.org/package/react-jsx)[![Build Status][build]](https://travis-ci.org/bigpipe/react-jsx)[![Dependencies][david]](https://david-dm.org/bigpipe/react-jsx)[![Coverage Status][cover]](https://coveralls.io/r/bigpipe/react-jsx?branch=master)\n\n[from]: https://img.shields.io/badge/from-bigpipe.io-9d8dff.svg?style=flat-square\n[version]: http://img.shields.io/npm/v/react-jsx.svg?style=flat-square\n[build]: http://img.shields.io/travis/bigpipe/react-jsx/master.svg?style=flat-square\n[david]: https://img.shields.io/david/bigpipe/react-jsx.svg?style=flat-square\n[cover]: http://img.shields.io/coveralls/bigpipe/react-jsx/master.svg?style=flat-square\n\nThe `react-jsx` module allows you to compile your JSX (`.jsx`) templates to:\n\n- React's `React.createElement` DOM syntax (default for server and client).\n- React's HTML output.\n- Pure HTML output.\n\nThese templates can be used on the server **and** client. This way you can move\nyour `JSX` templates out of your `React.createClass`'s `render` method and to\nit's own template files which leads to a more manageable code base.\n\nIn addition to the features mentioned above we also eliminated the requirement\nof \"global\" and \"locally\" scoped variables in your template. You can now pass in\nthe data using a `data` argument.\n\nBy using the same templates on the front and back-end you can create\nprogressively enhanced and SEO friendly web pages.\n\n## Table of Contents\n\n- [Installation](#installation)\n- [Versioning](#versioning)\n- [Usage](#usage)\n- [Passing data around](#passing-data-around)\n- [Templates](#templates)\n- [Client-side](#client-side)\n- [Output](#output)\n- [Warnings](#warnings)\n- [License](#license)\n\n## Installation\n\nThe module is published in the public npm registry and can be installed using:\n\n```\nnpm install --save react-jsx\n```\n\nAnd that's it! To learn more about how the API works, continue to the [usage]\nsection.\n\n## Versioning\n\nThe minor version of this module is in sync with the version of `react` and\n`react-tools` that we depend upon. Bug fixes to this library will be done as\npatch releases so you should read our versioning as:\n\n```\n<react.major.version>.<react.minor.version>.<our.react-jsx-module.patches>\n```\n\nThe earliest version of react that we support is **0.12**. So please note that\nour 0.0.x releases CAN include a breaking change so when you're adding this\nmodule to your package.json make sure you put down the full semver version.\n\n## Usage\n\nIn all of the examples we assume that you've already required the `jsx` compiler\nas following:\n\n```js\n'use strict';\n\nvar jsx = require('react-jsx');\n```\n\nThis `jsx` variable now contains 3 methods:\n\n- **server** Use this method if you want transform your `jsx` templates for\n  server-side usage. We will automatically inject `React` as global in the\n  templates so it all works as intended. We will return a function which you can\n  call to render your template.\n- **client** Use this method if you want to transform your `jsx` templates for\n  client-side usage. It assumes that React is already available as global on the\n  page. We will return a function which you can call to render you template.\n- **transform** Our internal compiler which transforms the JSX templates to a\n  template API.\n\nBoth the **server** and **client** method share the same API for compiling and\nrendering:\n\n```js\nvar template = fs.readFileSync('template.jsx', 'utf-8');\n\nvar server = jsx.server(template, { /* options */});\nvar client = jsx.client(template, {});\n\nconsole.log(server({ data: 'for template' }));\n```\n\nAnd they also share the same options:\n\n- **filename**: File name of the template file we're about to process. This will\n  be used for debugging purposes in the inlined source map when you've set\n  `debug` to true.\n- **debug**: When set to `true`, we will automatically inline source map.\n- **ecma**: Which ECMA version should the template be compiled towards. It\n  defaults to `es3` for the client and `es5` on the server.\n- **types** Don't use strict types.\n- **raw** This allows you to control how the generated HTML is outputted. By\n  default we output the React generated HTML which is full of `data-react-xxx`\n  attributes. Setting this option to `true` will return a clean HTML instead.\n\nWhen rendering the templates both the server and client method will return the\nexpected `React.createElement` nodes just like you would normally do in your\ntemplates so you can easily share templates with child/parent relations. If you\nwant the template methods. But your might want to output the raw/pure HTML\ninstead. This can be done by supplying `{ html: true }` as option to the\ntemplate function:\n\n```js\nvar template = fs.readFileSync('/path/to/template.jsx', 'utf-8')\n  , render = jsx.server(template, { filename: 'template.jsx' });\n\nconsole.log(render({ foo: 'bar' }, { html: true }));\n```\n\n### Passing data around\n\nThe generated client and server functions accept data or \"scope\" for the\ntemplates as first argument:\n\n```js\nrender({ foo: 'bar' });\n```\n\nIf you want to set a custom `this` context for the template you could call the\nreturned template function as followed:\n\n```js\nrender.call({ custom: 'this', value: 'is possible' });\n```\n\nBut the template function we've generated is smart enough to figure out if\nyou're passing around React instances and will automatically set the supplied\n`data` argument as context:\n\n```js\nvar HelloWorld = React.createClass({\n  render: function render() {\n    return render(this);\n  }\n});\n```\n\nSo in the example above the data argument is set to `this` so it will\nautomatically be introduced as `this` in the template AND all properties and\nmethods will also be introduced as local variables. So if where to mixins the\n`React.Intl` module in the class above your template would have access to\n`<FormattedMessage>` components:\n\n```js\nvar HelloWorld = React.createClass({\n  mixins: [require('react-intl').IntlMixin]\n  render: function render() {\n    return render(this);\n  }\n});\n```\n\nAnd the template that you would render could then contain:\n\n```jsx\n<FormattedMessage\n  message={this.getIntlMessage('post.meta')}\n  num={this.props.post.comments.length}\n  ago={<FormattedRelative value={thisprops.post.date} />}\n/>\n```\n\n### Templates\n\nThe `.jsx` templates that you're creating should only contain the parts that are\ntransformed in to `React.createElement`'s. In addition to that there is no need\nto `return` or `module.exports` the template. This is all taken care of under\nthe hood. The following example would a valid example of this:\n\n```jsx\n<div>\n  <input type=\"text\" value={foo} />\n</div>;\n```\n\nWorking with components isn't a problem either, you can still pass them around\nusing the `data` argument of the template function as illustrated in this HTTP\nserver example: \n\n```js\nvar http = require('http')\n  , path = require('path')\n  , React = require('react')\n  , jsx = require('react-jsx')\n  , read = require('fs').readFileSync;\n\nvar templates = {\n  hello: jsx.server(read(path.join(__dirname, 'hello.jsx'), 'utf-8')),\n  index: jsx.server(read(path.join(__dirname, 'index.jsx'), 'utf-8'))\n};\n\nvar HelloWorld = React.createClass({\n  render: function render() {\n    return templates.hello(this);\n  }\n});\n\nhttp.createServer(function (req, res) {\n  res.statusCode = 200;\n  res.setHeader('Content-Type', 'text/html');\n\n  res.end(templates.index({\n    HelloWorld: HelloWorld,\n    title: 'Hello world',\n    another: 'variable'\n  }, { html: true }));\n}).listen(8080);\n```\n\n```jsx\n/* index.jsx */\n<html>\n  <head>\n    <title>{title}</title>\n  </head>\n  <body>\n    <HelloWorld name={another} />\n  </body>\n</html>\n```\n\n```jsx\n/* hello.jsx */\n<div>\n  Hello world, you're just another {this.props.name}\n</div>\n```\n\n### Client-side\n\nThe client that we generate is a function but is optimized for ES3 so it works\nin older browser versions without any addition hassle. As the `jsx.client()`\nmethod returns a function you might need to transform this to a string if you\nwant to use it for client side templates. The string transformation is quite\neasy to do:\n\n```js\nvar build = 'var mytemplate = '+ jsx.client(template).toString();\n```\n\nThe `.toString()` method automatically transforms the function in to an\nanonymous function. In the example above we saved the template as `mytemplate`\nvariable. So when we store this a JavaScript file to disk using a\n`fs.writeFileSync('/mytemplate.js', mytemplate);` we can easily access the\ntemplate on the client side by referencing the `mytemplate` global.\n\nSo with this knowledge, an illustration of this:\n\n```js\nvar Component = React.createClass({\n  render: function render() {\n    return mytemplate({ foo: 'bar' });\n  }\n});\n```\n\n### Output\n\nTo give you an idea about what we're actually generating here, lets take the\nfollowing JSX template and convert it a client and server template:\n\n```jsx\n<div>\n  <input type=\"text\" value={defaultValue} />\n  <button onclick=\"alert('clicked!');\">Click Me!</button>\n  <ul>\n    {['un', 'deux', 'trois'].map(function(number) {\n      return <li>{number}</li>;\n    })}\n  </ul>\n</div>;\n```\n\nWhen we compile this template for server-side usage with the **raw** and\n**html** options enabled:\n\n```js\nvar server = jsx.server(template, { raw: true });\nconsole.log(server({ defaultValue: 10 }, { html: true }));\n```\n\nIt will generate the following output:\n\n```html\n<div><input type=\"text\" value=\"10\"><button>Click Me!</button><ul><li>un</li><li>deux</li><li>trois</li></ul></div>\n```\n\nAnd with the **raw** option set to **false** it will generate:\n\n```html\n<div data-reactid=\".26uh899yvb4\" data-react-checksum=\"-314283895\"><input type=\"text\" value=\"10\" data-reactid=\".26uh899yvb4.0\"><button data-reactid=\".26uh899yvb4.1\">Click Me!</button><ul data-reactid=\".26uh899yvb4.2\"><li data-reactid=\".26uh899yvb4.2.0\">un</li><li data-reactid=\".26uh899yvb4.2.1\">deux</li><li data-reactid=\".26uh899yvb4.2.2\">trois</li></ul></div>\n```\n\nBut by default we will just return React.createElement structures:\n\n```js\nvar client = jsx.client(template);\nconsole.log(client({ defaultValue: 10 }));\n```\n\nReturns the expected `React.createElement` structure:\n\n```js\nReact.createElement(\"div\", null,\n  React.createElement(\"input\", {type: \"text\", value: defaultValue}),\n  React.createElement(\"button\", {onclick: \"alert('clicked!');\"}, \"Click Me!\"),\n  React.createElement(\"ul\", null,\n    ['un', 'deux', 'trois'].map(function(number) {\n      return React.createElement(\"li\", null, number);\n    })\n  )\n);\n```\n\n## Warnings\n\nAs we are using the `react-tools` to compile the templates to all the nice\nthings it can happen that it output's \"useful\" information about your templates\nin the terminal. For example for the template used above you would see the\nfollowing warning in your terminal:\n\n```\nWarning: You provided a `value` prop to a form field without an `onChange`\nhandler. This will render a read-only field. If the field should be mutable use\n`defaultValue`. Otherwise, set either `onChange` or `readOnly`.\n```\n\nThere's not really a way to prevent this from happening except for running your\ncode with `NODE_ENV=production` as this will silence the warnings.\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "_id": "react-jsx@0.13.0",
  "dist": {
    "shasum": "9a07b053dc09c4a6d6d3c7c4b83aaedf34ce263f"
  },
  "_from": "react-jsx@",
  "_resolved": "https://registry.npmjs.org/react-jsx/-/react-jsx-0.13.0.tgz"
}
